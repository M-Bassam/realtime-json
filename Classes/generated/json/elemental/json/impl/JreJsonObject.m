//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//
//  Created by Larry Tin <dev@goodow.com>
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "elemental/json/JsonArray.h"
#include "elemental/json/JsonBoolean.h"
#include "elemental/json/JsonFactory.h"
#include "elemental/json/JsonNull.h"
#include "elemental/json/JsonNumber.h"
#include "elemental/json/JsonObject.h"
#include "elemental/json/JsonString.h"
#include "elemental/json/JsonType.h"
#include "elemental/json/JsonValue.h"
#include "elemental/json/impl/JreJsonObject.h"
#include "elemental/json/impl/JreJsonValue.h"
#include "elemental/json/impl/JsonContext.h"
#include "elemental/json/impl/JsonObjectContext.h"
#include "elemental/json/impl/JsonUtil.h"
#include "elemental/json/impl/JsonVisitor.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation ElementalJsonImplJreJsonObject

+ (id<JavaUtilList>)stringifyOrderWithNSStringArray:(IOSObjectArray *)keys {
  id<JavaUtilList> toReturn = [[JavaUtilArrayList alloc] init];
  id<JavaUtilList> nonNumeric = [[JavaUtilArrayList alloc] init];
  {
    IOSObjectArray *a__ = keys;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *key = (*b__++);
      if ([((NSString *) nil_chk(key)) matches:@"\\d+"]) {
        [toReturn addWithId:key];
      }
      else {
        [nonNumeric addWithId:key];
      }
    }
  }
  [JavaUtilCollections sortWithJavaUtilList:toReturn];
  [toReturn addAllWithJavaUtilCollection:nonNumeric];
  return toReturn;
}

- (id)initWithGDJsonFactory:(id<GDJsonFactory>)factory {
  if (self = [super init]) {
    map_ = [[JavaUtilLinkedHashMap alloc] init];
    self->factory_ = factory;
  }
  return self;
}

- (BOOL)asBoolean {
  return YES;
}

- (double)asNumber {
  return JavaLangDouble_NaN;
}

- (NSString *)asString {
  return @"[object Object]";
}

- (id<GDJsonValue>)get:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
}

- (id<GDJsonArray>)getArray:(NSString *)key {
  return (id<GDJsonArray>) check_protocol_cast([self get:key], @protocol(GDJsonArray));
}

- (BOOL)getBoolean:(NSString *)key {
  return [((id<GDJsonBoolean>) nil_chk([self get:key])) getBoolean];
}

- (double)getNumber:(NSString *)key {
  return [((id<GDJsonNumber>) nil_chk([self get:key])) getNumber];
}

- (id<GDJsonObject>)getObject:(NSString *)key {
  return (id<GDJsonObject>) check_protocol_cast([self get:key], @protocol(GDJsonObject));
}

- (id)getObject {
  id<JavaUtilMap> obj = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilMap_Entry> __strong e in [((id<JavaUtilMap>) nil_chk(map_)) entrySet]) {
    (void) [obj putWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey] withId:[((ElementalJsonImplJreJsonValue *) nil_chk([e getValue])) getObject]];
  }
  return obj;
}

- (NSString *)getString:(NSString *)key {
  return [((id<GDJsonString>) nil_chk([self get:key])) getString];
}

- (GDJsonTypeEnum *)getType {
  return [GDJsonTypeEnum OBJECT];
}

- (BOOL)hasKey:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key];
}

- (BOOL)jsEquals:(id<GDJsonValue>)value {
  return [nil_chk([self getObject]) isEqual:[((ElementalJsonImplJreJsonValue *) nil_chk(value)) getObject]];
}

- (IOSObjectArray *)keys {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[map_ size] type:[IOSClass classWithClass:[NSString class]]]];
}

- (void)set:(NSString *)key value:(id<GDJsonValue>)value {
  if (value == nil) {
    value = [((id<GDJsonFactory>) nil_chk(factory_)) createNull];
  }
  (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:value];
}

- (void)set:(NSString *)key string:(NSString *)value {
  [self set:key value:[((id<GDJsonFactory>) nil_chk(factory_)) createWithNSString:value]];
}

- (void)set:(NSString *)key number:(double)value {
  [self set:key value:[((id<GDJsonFactory>) nil_chk(factory_)) createWithDouble:value]];
}

- (void)set:(NSString *)key boolean:(BOOL)bool_ {
  [self set:key value:[((id<GDJsonFactory>) nil_chk(factory_)) createWithBoolean:bool_]];
}

- (void)remove:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key];
}

- (void)setWithNSString:(NSString *)key
        withGDJsonValue:(id<GDJsonValue>)value {
  [self set:key value:value];
}

- (NSString *)toJson {
  return [ElementalJsonImplJsonUtil stringifyWithGDJsonValue:self];
}

- (NSString *)description {
  return [self toJson];
}

- (void)traverseWithElementalJsonImplJsonVisitor:(ElementalJsonImplJsonVisitor *)visitor
                withElementalJsonImplJsonContext:(ElementalJsonImplJsonContext *)ctx {
  if ([((ElementalJsonImplJsonVisitor *) nil_chk(visitor)) visitWithGDJsonObject:self withElementalJsonImplJsonContext:ctx]) {
    ElementalJsonImplJsonObjectContext *objCtx = [[ElementalJsonImplJsonObjectContext alloc] initWithGDJsonObject:self];
    for (NSString * __strong key in [ElementalJsonImplJreJsonObject stringifyOrderWithNSStringArray:[self keys]]) {
      [objCtx setCurrentKeyWithNSString:key];
      if ([visitor visitKeyWithNSString:[objCtx getCurrentKey] withElementalJsonImplJsonContext:objCtx]) {
        [visitor acceptWithGDJsonValue:[self get:key] withElementalJsonImplJsonContext:objCtx];
        [objCtx setFirstWithBoolean:NO];
      }
    }
  }
  [visitor endVisitWithGDJsonObject:self withElementalJsonImplJsonContext:ctx];
}

- (void)copyAllFieldsTo:(ElementalJsonImplJreJsonObject *)other {
  [super copyAllFieldsTo:other];
  other->factory_ = factory_;
  other->map_ = map_;
}

@end
